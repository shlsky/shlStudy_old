/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shl.thriftstudy.result;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BookingResult implements org.apache.thrift.TBase<BookingResult, BookingResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BookingResult");

  private static final org.apache.thrift.protocol.TField BOOKINGRES_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingres", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INVOKE_RES_FIELD_DESC = new org.apache.thrift.protocol.TField("invokeRes", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BookingResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BookingResultTupleSchemeFactory());
  }

  public boolean bookingres; // required
  public String msg; // optional
  public InvokeRes invokeRes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOKINGRES((short)1, "bookingres"),
    MSG((short)2, "msg"),
    INVOKE_RES((short)3, "invokeRes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOKINGRES
          return BOOKINGRES;
        case 2: // MSG
          return MSG;
        case 3: // INVOKE_RES
          return INVOKE_RES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOKINGRES_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.MSG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOKINGRES, new org.apache.thrift.meta_data.FieldMetaData("bookingres", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "Boolean")));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.INVOKE_RES, new org.apache.thrift.meta_data.FieldMetaData("invokeRes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvokeRes.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BookingResult.class, metaDataMap);
  }

  public BookingResult() {
  }

  public BookingResult(
    boolean bookingres,
    InvokeRes invokeRes)
  {
    this();
    this.bookingres = bookingres;
    setBookingresIsSet(true);
    this.invokeRes = invokeRes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BookingResult(BookingResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.bookingres = other.bookingres;
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    if (other.isSetInvokeRes()) {
      this.invokeRes = new InvokeRes(other.invokeRes);
    }
  }

  public BookingResult deepCopy() {
    return new BookingResult(this);
  }

  @Override
  public void clear() {
    setBookingresIsSet(false);
    this.bookingres = false;
    this.msg = null;
    this.invokeRes = null;
  }

  public boolean isBookingres() {
    return this.bookingres;
  }

  public BookingResult setBookingres(boolean bookingres) {
    this.bookingres = bookingres;
    setBookingresIsSet(true);
    return this;
  }

  public void unsetBookingres() {
    __isset_bit_vector.clear(__BOOKINGRES_ISSET_ID);
  }

  /** Returns true if field bookingres is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingres() {
    return __isset_bit_vector.get(__BOOKINGRES_ISSET_ID);
  }

  public void setBookingresIsSet(boolean value) {
    __isset_bit_vector.set(__BOOKINGRES_ISSET_ID, value);
  }

  public String getMsg() {
    return this.msg;
  }

  public BookingResult setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public InvokeRes getInvokeRes() {
    return this.invokeRes;
  }

  public BookingResult setInvokeRes(InvokeRes invokeRes) {
    this.invokeRes = invokeRes;
    return this;
  }

  public void unsetInvokeRes() {
    this.invokeRes = null;
  }

  /** Returns true if field invokeRes is set (has been assigned a value) and false otherwise */
  public boolean isSetInvokeRes() {
    return this.invokeRes != null;
  }

  public void setInvokeResIsSet(boolean value) {
    if (!value) {
      this.invokeRes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOKINGRES:
      if (value == null) {
        unsetBookingres();
      } else {
        setBookingres((Boolean)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case INVOKE_RES:
      if (value == null) {
        unsetInvokeRes();
      } else {
        setInvokeRes((InvokeRes)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOKINGRES:
      return Boolean.valueOf(isBookingres());

    case MSG:
      return getMsg();

    case INVOKE_RES:
      return getInvokeRes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOKINGRES:
      return isSetBookingres();
    case MSG:
      return isSetMsg();
    case INVOKE_RES:
      return isSetInvokeRes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BookingResult)
      return this.equals((BookingResult)that);
    return false;
  }

  public boolean equals(BookingResult that) {
    if (that == null)
      return false;

    boolean this_present_bookingres = true;
    boolean that_present_bookingres = true;
    if (this_present_bookingres || that_present_bookingres) {
      if (!(this_present_bookingres && that_present_bookingres))
        return false;
      if (this.bookingres != that.bookingres)
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_invokeRes = true && this.isSetInvokeRes();
    boolean that_present_invokeRes = true && that.isSetInvokeRes();
    if (this_present_invokeRes || that_present_invokeRes) {
      if (!(this_present_invokeRes && that_present_invokeRes))
        return false;
      if (!this.invokeRes.equals(that.invokeRes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BookingResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BookingResult typedOther = (BookingResult)other;

    lastComparison = Boolean.valueOf(isSetBookingres()).compareTo(typedOther.isSetBookingres());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingres()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingres, typedOther.bookingres);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvokeRes()).compareTo(typedOther.isSetInvokeRes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvokeRes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokeRes, typedOther.invokeRes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BookingResult(");
    boolean first = true;

    sb.append("bookingres:");
    sb.append(this.bookingres);
    first = false;
    if (isSetMsg()) {
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("invokeRes:");
    if (this.invokeRes == null) {
      sb.append("null");
    } else {
      sb.append(this.invokeRes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'bookingres' because it's a primitive and you chose the non-beans generator.
    if (invokeRes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'invokeRes' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BookingResultStandardSchemeFactory implements SchemeFactory {
    public BookingResultStandardScheme getScheme() {
      return new BookingResultStandardScheme();
    }
  }

  private static class BookingResultStandardScheme extends StandardScheme<BookingResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BookingResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOKINGRES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bookingres = iprot.readBool();
              struct.setBookingresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVOKE_RES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.invokeRes = new InvokeRes();
              struct.invokeRes.read(iprot);
              struct.setInvokeResIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBookingres()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bookingres' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BookingResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOKINGRES_FIELD_DESC);
      oprot.writeBool(struct.bookingres);
      oprot.writeFieldEnd();
      if (struct.msg != null) {
        if (struct.isSetMsg()) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.invokeRes != null) {
        oprot.writeFieldBegin(INVOKE_RES_FIELD_DESC);
        struct.invokeRes.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BookingResultTupleSchemeFactory implements SchemeFactory {
    public BookingResultTupleScheme getScheme() {
      return new BookingResultTupleScheme();
    }
  }

  private static class BookingResultTupleScheme extends TupleScheme<BookingResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BookingResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.bookingres);
      struct.invokeRes.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetMsg()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BookingResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.bookingres = iprot.readBool();
      struct.setBookingresIsSet(true);
      struct.invokeRes = new InvokeRes();
      struct.invokeRes.read(iprot);
      struct.setInvokeResIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
    }
  }

}

