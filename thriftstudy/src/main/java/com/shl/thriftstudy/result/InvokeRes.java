/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shl.thriftstudy.result;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InvokeRes implements org.apache.thrift.TBase<InvokeRes, InvokeRes._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InvokeRes");

  private static final org.apache.thrift.protocol.TField INVOKERES_FIELD_DESC = new org.apache.thrift.protocol.TField("invokeres", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField INVOKECODE_FIELD_DESC = new org.apache.thrift.protocol.TField("invokecode", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InvokeResStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InvokeResTupleSchemeFactory());
  }

  public boolean invokeres; // required
  public String invokecode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INVOKERES((short)1, "invokeres"),
    INVOKECODE((short)2, "invokecode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INVOKERES
          return INVOKERES;
        case 2: // INVOKECODE
          return INVOKECODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INVOKERES_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INVOKERES, new org.apache.thrift.meta_data.FieldMetaData("invokeres", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "Boolean")));
    tmpMap.put(_Fields.INVOKECODE, new org.apache.thrift.meta_data.FieldMetaData("invokecode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InvokeRes.class, metaDataMap);
  }

  public InvokeRes() {
  }

  public InvokeRes(
    boolean invokeres,
    String invokecode)
  {
    this();
    this.invokeres = invokeres;
    setInvokeresIsSet(true);
    this.invokecode = invokecode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InvokeRes(InvokeRes other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.invokeres = other.invokeres;
    if (other.isSetInvokecode()) {
      this.invokecode = other.invokecode;
    }
  }

  public InvokeRes deepCopy() {
    return new InvokeRes(this);
  }

  @Override
  public void clear() {
    setInvokeresIsSet(false);
    this.invokeres = false;
    this.invokecode = null;
  }

  public boolean isInvokeres() {
    return this.invokeres;
  }

  public InvokeRes setInvokeres(boolean invokeres) {
    this.invokeres = invokeres;
    setInvokeresIsSet(true);
    return this;
  }

  public void unsetInvokeres() {
    __isset_bit_vector.clear(__INVOKERES_ISSET_ID);
  }

  /** Returns true if field invokeres is set (has been assigned a value) and false otherwise */
  public boolean isSetInvokeres() {
    return __isset_bit_vector.get(__INVOKERES_ISSET_ID);
  }

  public void setInvokeresIsSet(boolean value) {
    __isset_bit_vector.set(__INVOKERES_ISSET_ID, value);
  }

  public String getInvokecode() {
    return this.invokecode;
  }

  public InvokeRes setInvokecode(String invokecode) {
    this.invokecode = invokecode;
    return this;
  }

  public void unsetInvokecode() {
    this.invokecode = null;
  }

  /** Returns true if field invokecode is set (has been assigned a value) and false otherwise */
  public boolean isSetInvokecode() {
    return this.invokecode != null;
  }

  public void setInvokecodeIsSet(boolean value) {
    if (!value) {
      this.invokecode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INVOKERES:
      if (value == null) {
        unsetInvokeres();
      } else {
        setInvokeres((Boolean)value);
      }
      break;

    case INVOKECODE:
      if (value == null) {
        unsetInvokecode();
      } else {
        setInvokecode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INVOKERES:
      return Boolean.valueOf(isInvokeres());

    case INVOKECODE:
      return getInvokecode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INVOKERES:
      return isSetInvokeres();
    case INVOKECODE:
      return isSetInvokecode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InvokeRes)
      return this.equals((InvokeRes)that);
    return false;
  }

  public boolean equals(InvokeRes that) {
    if (that == null)
      return false;

    boolean this_present_invokeres = true;
    boolean that_present_invokeres = true;
    if (this_present_invokeres || that_present_invokeres) {
      if (!(this_present_invokeres && that_present_invokeres))
        return false;
      if (this.invokeres != that.invokeres)
        return false;
    }

    boolean this_present_invokecode = true && this.isSetInvokecode();
    boolean that_present_invokecode = true && that.isSetInvokecode();
    if (this_present_invokecode || that_present_invokecode) {
      if (!(this_present_invokecode && that_present_invokecode))
        return false;
      if (!this.invokecode.equals(that.invokecode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InvokeRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InvokeRes typedOther = (InvokeRes)other;

    lastComparison = Boolean.valueOf(isSetInvokeres()).compareTo(typedOther.isSetInvokeres());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvokeres()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokeres, typedOther.invokeres);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvokecode()).compareTo(typedOther.isSetInvokecode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvokecode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokecode, typedOther.invokecode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InvokeRes(");
    boolean first = true;

    sb.append("invokeres:");
    sb.append(this.invokeres);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invokecode:");
    if (this.invokecode == null) {
      sb.append("null");
    } else {
      sb.append(this.invokecode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'invokeres' because it's a primitive and you chose the non-beans generator.
    if (invokecode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'invokecode' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InvokeResStandardSchemeFactory implements SchemeFactory {
    public InvokeResStandardScheme getScheme() {
      return new InvokeResStandardScheme();
    }
  }

  private static class InvokeResStandardScheme extends StandardScheme<InvokeRes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InvokeRes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INVOKERES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.invokeres = iprot.readBool();
              struct.setInvokeresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVOKECODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invokecode = iprot.readString();
              struct.setInvokecodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetInvokeres()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'invokeres' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InvokeRes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INVOKERES_FIELD_DESC);
      oprot.writeBool(struct.invokeres);
      oprot.writeFieldEnd();
      if (struct.invokecode != null) {
        oprot.writeFieldBegin(INVOKECODE_FIELD_DESC);
        oprot.writeString(struct.invokecode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InvokeResTupleSchemeFactory implements SchemeFactory {
    public InvokeResTupleScheme getScheme() {
      return new InvokeResTupleScheme();
    }
  }

  private static class InvokeResTupleScheme extends TupleScheme<InvokeRes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InvokeRes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.invokeres);
      oprot.writeString(struct.invokecode);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InvokeRes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.invokeres = iprot.readBool();
      struct.setInvokeresIsSet(true);
      struct.invokecode = iprot.readString();
      struct.setInvokecodeIsSet(true);
    }
  }

}

